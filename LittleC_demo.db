dlltest.bs
import stdcall int MessageBox(unsigned int hWnd,char *lpText,char *lpCaption,unsigned int uType)("user32.dll","MessageBoxA");#13#10MessageBox(0,"Ein Hallo aus BeRoScript","DLL Test",0);#13#10
enum.bs
enum monate { Jan=1,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec };#13#10void main() {#13#10 bool Wert;#13#10 Wert=true;#13#10 switch(Wert){#13#10  case false:printf("Falsch\n");break;#13#10  case true:printf("Wahr\n");break;#13#10 }#13#10 Wert?printf("Das ist wahr\n"):printf("Das ist nicht wahr\n");#13#10 printf(Jan);#13#10}
ex0.bs
int main() {#13#10 int a=0;#13#10 byte *b;#13#10 byte c[10];#13#10 byte *d[10];#13#10 d=&c;#13#10 c[1]=1;#13#10 c[5]=5;#13#10 *d[1]++;#13#10 *d[5]--;#13#10 b=&a;#13#10 *b=4096%256;#13#10 b++;#13#10 *b=4096/256;#13#10 b--;#13#10 a/=2;#13#10 printf(a,"*2=4096\r\n"); #13#10 printf(c[1],"\r\n"); #13#10 printf(c[5],"\r\n"); #13#10}
ex1.bs
int main() {#13#10 byte i,k;#13#10 for (i=1;i<=4;i++) {#13#10  for (k=1;k<=4;k++) {#13#10   printf(i,"*",k,"=",i*k,"\r\n");  #13#10  }#13#10 } #13#10}
ex2.bs
int main() {#13#10 byte i,k,j=1;#13#10 for (i=1;i<=10;i++) {#13#10  for (k=1;k<=10;k++) {#13#10   if (j<10) {#13#10    printf("  ",j," ");  #13#10   } else if (j<100) {#13#10    printf(" ",j," ");  #13#10   } else printf(j," ");  #13#10   j++;#13#10  }#13#10  printf("\r\n");  #13#10 } #13#10}
ex3.bs
int drawpixel(int x,unsigned byte y) {#13#10 printf(x,"x",y,"\r\n");#13#10}#13#10int main() {#13#10 drawpixel(320,200);#13#10}
ex4.bs
int main(){int a=0;do{printf(a++);}while(a<=5);a--;while(a)printf(--a);}
ex5.bs
byte a(int b) {#13#10 if (b<5) {#13#10  printf(b,"\r\n");#13#10  byte c=a(++b);#13#10  printf(b,"\r\n"); #13#10  return c;#13#10 } else return 1;#13#10}#13#10int main() {#13#10 printf(a(1),"\r\n");#13#10}
exectest.bs
exec("","dir *.*");
fib.bs
int fib(int n){#13#10  return (n < 2) ? n : (fib(n-2) + fib(n-1));#13#10}#13#10void main(){#13#10  int ticks = gettickcount();#13#10  print(fib(36), " \n");#13#10  ticks = gettickcount() - ticks;#13#10  print("Ticks: ", ticks/1000, ".", inttostr(ticks % 1000,3), " s\n");#13#10}#13#10
funcpointer.bs
struct a {#13#10 stdcall void *a(int a,int b,int c);#13#10 stdcall void *b(int a,int b,int c);#13#10 int *c(int d);#13#10} b;#13#10stdcall void test(int a,int b,int c){#13#10 printf(a," ",b," ",c," ");#13#10}#13#10int c(int d){#13#10 return d+2;#13#10}#13#10int main() {#13#10 b.c=&c;#13#10 b.a=&test;#13#10 *b.a(1,2,3);#13#10 b.b=b.a;#13#10 *b.b(4,5,6);#13#10 printf(c(5)," ");#13#10}#13#10
helloworld.bs
print("Hello World!\n");
macro1.bs
#define InRange(x,y,x1,y1,x2,y2) if((x>x1)&(y>y1)&(x<x2)&(y<y2))#13#10int main(){#13#10 InRange(128,128,0,0,256,256){#13#10  printf("Punkt liegt im Rect!");#13#10 }#13#10}
macro2.bs
#define Macro(a,b) if(a==b)#13#10int main() {#13#10 Macro(1,1)printf("Hallo Welt");#13#10 float a;#13#10 a=1;#13#10 a++;#13#10 a++;#13#10 printf(a);#13#10}
nestedloop.bs
int x=0,n=16,ticks=gettickcount();#13#10for(int a=0;a<n;a++)for(int b=0;b<n;b++)for(int c=0;c<n;c++)for(int d=0;d<n;d++)for(int e=0;e<n;e++)for(int f=0;f<n;f++)x++;#13#10ticks=gettickcount()-ticks;#13#10print("Ticks: ",ticks/1000,".",inttostr(ticks%1000,3)," s\n");#13#10print("x: ",x,"\n");#13#10
oop.bs
enum Geschlechter { maennlich=0, weiblich }#13#10object Mensch {#13#10 string Name;#13#10 int Alter;#13#10 int Geschlecht;#13#10};#13#10object Ort {#13#10 string Adresse;#13#10};#13#10object Schule(Ort) {#13#10 string Form;#13#10};#13#10object Lehrer(Mensch,Schule) {#13#10 string Fach;#13#10};#13#10object Schueler(Mensch,Schule) {#13#10 bool IstGut;#13#10};#13#10int Mensch::EineZahl() {#13#10 return 1234;#13#10}#13#10void Mensch::printdata() {#13#10 printf("Name: ",Name,"\n");#13#10 printf("Alter: ",Alter,"\n");#13#10 printf("Geschlecht: ",Geschlecht?"weiblich":"maennlich","\n");#13#10}#13#10void Ort::printdata() {#13#10 printf("Adresse: ",this->Adresse,"\n");#13#10}#13#10void Schule::printdata() {#13#10 inherited();#13#10 printf("Schulform: ",this->Form,"\n");#13#10}#13#10void Lehrer::printdata() {#13#10 inherited Mensch();#13#10 inherited Schule();#13#10 printf("Unterrichtet: ",Fach,"\n");#13#10 printf(inherited Mensch.EineZahl()*2,"\n\n");#13#10}#13#10void Schueler::printdata() {#13#10 inherited Mensch.printdata();#13#10 inherited Schule.printdata();#13#10 printf("Status: ",this->IstGut?"liefert gute Leistungen":"ist super faul","\n");#13#10 printf(inherited EineZahl(),"\n\n");#13#10}#13#10void main(){#13#10 Lehrer HerrMustermann;#13#10 Schueler Max;#13#10 HerrMustermann.Name="Tom Mustermann";#13#10 HerrMustermann.Alter=38;#13#10 HerrMustermann.Geschlecht=maennlich;#13#10 HerrMustermann.Adresse="Musterstrasse 123";#13#10 HerrMustermann.Form="Gesamtschule";#13#10 HerrMustermann.Fach="Mathematik";#13#10 Max.Name="Max Schmidt";#13#10 Max.Alter=18;#13#10 Max.Geschlecht=maennlich;#13#10 Max.Adresse="Musterstrasse 123";#13#10 Max.Form="Gesamtschule";#13#10 Max.IstGut=true;#13#10 HerrMustermann.printdata();#13#10 Max.printdata();#13#10} 
oop2.bs
struct sXButton #13#10{#13#10  int Left;#13#10  int Top;#13#10  int Width;#13#10  int Height;#13#10} XButton;#13#10#13#10object sXForm#13#10{#13#10  int Width;#13#10  int Height;#13#10  int NumButtons;#13#10  sXButton Buttons[100];#13#10} XForm;#13#10#13#10void sXForm::Init()#13#10{#13#10  Width = 0;#13#10  Height = 0;#13#10  NumButtons = 100;#13#10}#13#10#13#10int sXForm::AddButton(int _Left, int _Top, int _Width, int _Height) #13#10{#13#10 NumButtons++;#13#10 return NumButtons-1;#13#10}#13#10#13#10object sXGUI#13#10{#13#10  int NumForms;#13#10  sXForm Forms[10];#13#10} XGUI;#13#10#13#10void sXGUI::Init()#13#10{#13#10 NumForms = 0;#13#10}#13#10#13#10int sXGUI::AddForm(int _Width, int _Height)#13#10{#13#10  NumForms++;#13#10  Forms[NumForms-1].Init();#13#10  Forms[NumForms-1].Width = _Width;#13#10  Forms[NumForms-1].Height = _Height;#13#10  return NumForms-1;#13#10}#13#10#13#10sXGUI gGUI;#13#10#13#10void main()#13#10{#13#10  gGUI.Init();#13#10  int mainidx = gGUI.AddForm(300, 100);#13#10#13#10  printf("NumButtons: ", gGUI.Forms[mainidx].NumButtons, "\n");#13#10}
pi.bs
int d=4,r=10000,n=251,m=3335,i=0,k,q,a[3340];int main(){for(;m-i;a[i++]=2);a[m]=4;for(;n;n--){for(q=0,k=m;k;k--){a[k]=a[k]*r+q;q=a[k]/(2*k+1);a[k]-=(2*k+1)*q;q*=k;}a[0]=a[0]*r+q;q=a[0]/r;a[0]-=q*r;printf(inttostr(q,(n==251)?1:4));if(n==251)printf(".");}}
pi2.bs
#define BASE 10000#13#10#define DIGITS 1000#13#10int tot[DIGITS],t1[DIGITS],t2[DIGITS],t3[DIGITS],nblock;#13#10#13#10void docopy(int *result[DIGITS],int *from[DIGITS]){#13#10 for(int i=0;i<nblock;i++)*result[i]=*from[i];#13#10}#13#10#13#10int zero(int *result[DIGITS]){#13#10 for(int i=0;i<nblock;i++)if(*result[i])return 0;#13#10 return 1;#13#10}#13#10#13#10void add(int *result[DIGITS],int *increm[DIGITS]){#13#10 for(int i=nblock-1;i>=0;i--){#13#10  *result[i]+=*increm[i];#13#10  if(*result[i]>=BASE){#13#10   *result[i]-=BASE;#13#10   *result[i-1]++;#13#10  }#13#10 }#13#10}#13#10#13#10void sub(int *result[DIGITS],int *decrem[DIGITS]){#13#10 for(int i=nblock-1;i>=0;i--){#13#10  *result[i]-=*decrem[i];#13#10  if(*result[i]<0){#13#10   *result[i]+=BASE;#13#10   *result[i-1]--;#13#10  }#13#10 }#13#10}#13#10#13#10void mult(int *result[DIGITS],int factor){#13#10 int i,carry=0;#13#10 for(i=nblock-1;i>=0;i--){#13#10  *result[i]*=factor;#13#10  *result[i]+=carry;#13#10  carry=*result[i]/BASE;#13#10  *result[i]%=BASE;#13#10 }#13#10}#13#10#13#10void div(int *result[DIGITS],int denom){#13#10 int i,carry=0;#13#10 for(i=0;i<nblock;i++){#13#10  *result[i]+=carry*BASE;#13#10  carry=*result[i]%denom;#13#10  *result[i]/=denom;#13#10 }#13#10}#13#10#13#10void set(int *result[DIGITS],int rhs){#13#10 for(int i=0;i<nblock;i++)*result[i]=0;#13#10 *result[0]=rhs;#13#10}#13#10#13#10void arctan(int *result[DIGITS],int *w1[DIGITS],int *w2[DIGITS],int denom,int onestep){#13#10 int denom2=denom*denom,k=1;#13#10 set(result,1);#13#10 div(result,denom);#13#10 docopy(w1,result);#13#10 do{#13#10  if(onestep){#13#10   div(w1,denom2);#13#10  }else{#13#10   div(w1,denom);#13#10   div(w1,denom);#13#10  }#13#10  docopy(w2,w1);#13#10  div(w2,2*k+1);#13#10  if(k%2){#13#10   sub(result,w2);#13#10  }else{#13#10   add(result,w2);#13#10  }#13#10  k++;#13#10 }while(!zero(w2));#13#10}#13#10#13#10void printpi(int *result[DIGITS]){#13#10 char s[10];#13#10 printf(inttostr(*result[0],1),".");#13#10 for(int i=1;i<nblock;i++)printf(inttostr(*result[i],4));#13#10 printf("\n");#13#10}#13#10#13#10void main(){#13#10 int ticks=gettickcount();#13#10 nblock=DIGITS/4;#13#10 arctan(&tot,&t1,&t2,5,1);#13#10 mult(&tot,4);#13#10 arctan(&t3,&t1,&t2,239,2);#13#10 sub(&tot,&t3);#13#10 mult(&tot,4);#13#10 ticks=gettickcount()-ticks;#13#10 printpi(&tot);#13#10 print("Ticks: ",ticks/1000,".",inttostr(ticks%1000,3)," s\n");#13#10}#13#10
pi3.bs
#define BASE 10000#13#10#define DIGITS 10000#13#10int tot[DIGITS],t1[DIGITS],t2[DIGITS],t3[DIGITS],nblock;#13#10#13#10void docopy(int *result[DIGITS],int *from[DIGITS]){#13#10 for(int i=0;i<nblock;i++)*result[i]=*from[i];#13#10}#13#10#13#10int zero(int *result[DIGITS]){#13#10 for(int i=0;i<nblock;i++)if(*result[i])return 0;#13#10 return 1;#13#10}#13#10#13#10void add(int *result[DIGITS],int *increm[DIGITS]){#13#10 for(int i=nblock-1;i>=0;i--){#13#10  *result[i]+=*increm[i];#13#10  if(*result[i]>=BASE){#13#10   *result[i]-=BASE;#13#10   *result[i-1]++;#13#10  }#13#10 }#13#10}#13#10#13#10void sub(int *result[DIGITS],int *decrem[DIGITS]){#13#10 for(int i=nblock-1;i>=0;i--){#13#10  *result[i]-=*decrem[i];#13#10  if(*result[i]<0){#13#10   *result[i]+=BASE;#13#10   *result[i-1]--;#13#10  }#13#10 }#13#10}#13#10#13#10void mult(int *result[DIGITS],int factor){#13#10 int i,carry=0;#13#10 for(i=nblock-1;i>=0;i--){#13#10  *result[i]*=factor;#13#10  *result[i]+=carry;#13#10  carry=*result[i]/BASE;#13#10  *result[i]%=BASE;#13#10 }#13#10}#13#10#13#10void div(int *result[DIGITS],int denom){#13#10 int i,carry=0;#13#10 for(i=0;i<nblock;i++){#13#10  *result[i]+=carry*BASE;#13#10  carry=*result[i]%denom;#13#10  *result[i]/=denom;#13#10 }#13#10}#13#10#13#10void set(int *result[DIGITS],int rhs){#13#10 for(int i=0;i<nblock;i++)*result[i]=0;#13#10 *result[0]=rhs;#13#10}#13#10#13#10void arctan(int *result[DIGITS],int *w1[DIGITS],int *w2[DIGITS],int denom,int onestep){#13#10 int denom2=denom*denom,k=1;#13#10 set(result,1);#13#10 div(result,denom);#13#10 docopy(w1,result);#13#10 do{#13#10  if(onestep){#13#10   div(w1,denom2);#13#10  }else{#13#10   div(w1,denom);#13#10   div(w1,denom);#13#10  }#13#10  docopy(w2,w1);#13#10  div(w2,2*k+1);#13#10  if(k%2){#13#10   sub(result,w2);#13#10  }else{#13#10   add(result,w2);#13#10  }#13#10  k++;#13#10 }while(!zero(w2));#13#10}#13#10#13#10void printpi(int *result[DIGITS]){#13#10 char s[10];#13#10 printf(inttostr(*result[0],1),".");#13#10 for(int i=1;i<nblock;i++)printf(inttostr(*result[i],4));#13#10 printf("\n");#13#10}#13#10#13#10void main(){#13#10 int ticks=gettickcount();#13#10 nblock=DIGITS/4;#13#10 arctan(&tot,&t1,&t2,5,1);#13#10 mult(&tot,4);#13#10 arctan(&t3,&t1,&t2,239,2);#13#10 sub(&tot,&t3);#13#10 mult(&tot,4);#13#10 ticks=gettickcount()-ticks;#13#10 printpi(&tot);#13#10 print("Ticks: ",ticks/1000,".",inttostr(ticks%1000,3)," s\n");#13#10}#13#10
prime.bs
int main() {#13#10 long i,k,gefunden=0;#13#10 for (i=2;i<=2048;i++) {#13#10  byte prime=1;#13#10  for (k=2;k<=i;k++) {#13#10   if (i!=k) {#13#10    if ((i%k)==0) {#13#10     prime=0;#13#10     break;#13#10    }#13#10   }#13#10  }#13#10  if (prime) {#13#10   printf(i," ist eine Primezahl\r\n");  #13#10   gefunden++;#13#10  }#13#10 } #13#10 printf(gefunden," Primezahlen im Zahlenbereich 2 bis 2048 gefunden!\r\n");  #13#10}
rek.bs
static void Rek(int i,int m) {#13#10 static int F;#13#10 if(!i){#13#10  F=m;#13#10  m=++i;#13#10 } #13#10 printf(m," ");#13#10 if (++i<=F){#13#10  Rek(i,m*i);#13#10 }else{#13#10  printf("\n");#13#10 }#13#10}#13#10#13#10void main() {#13#10 Rek(0,8);#13#10}
self.bs
int a,b=1;#13#10int afunc() {#13#10 static int a;#13#10 if (b) { #13#10  printf("afunc(); Call-Loop entered\r\n"); #13#10  a=0;#13#10  b=0;#13#10 } else a++;#13#10 if (a<16) {#13#10  printf(a," ");#13#10  afunc();#13#10 } else {#13#10  printf("\r\nafunc(); Call-Loop exited\r\n"); #13#10 }#13#10}#13#10int main() {#13#10 afunc();#13#10}
sieve.bs
int flags[8193],i,j=900,k,count=0,ticks=gettickcount();#13#10while(j--){#13#10 count=0;#13#10 for (i=2;i<=8192;i++)flags[i]=1;#13#10 for (i=2;i<=8192;i++){#13#10  if(flags[i]){#13#10   for (k=i+i;k<=8192;k+=i)flags[k]=0;#13#10   count++;#13#10  }#13#10 }#13#10}#13#10ticks=gettickcount()-ticks;#13#10print("Ticks: ",ticks/1000,".",inttostr(ticks%1000,3)," s\n");#13#10print("Count: ",count,"\n");#13#10#13#10
strings1.bs
string test(string a,string b) {#13#10 return "Hallo "+a+" "+b;#13#10}#13#10#13#10int main() {#13#10 string c;#13#10 unsigned char a;#13#10 c=test("Benjamin","Rosseaux");#13#10 c+=" !";#13#10 printf(c);#13#10}#13#10#13#10
strings2.bs
string test(string a,string b) {#13#10 return a+b;#13#10}#13#10int main() {#13#10 string b,c,d;#13#10 char a;#13#10 d="loam";#13#10 c=" H"+d[2]+d[0]+d[0]+d[1]+" ";#13#10 c=trim(c);#13#10 c+=" Welt";#13#10 b="ent";#13#10 a="M";#13#10 c=test(a+d[1]+d[3]+b,"... ")+c+" ;)";#13#10 c=copy(c,0,9);#13#10 c=delete(c,0,3);#13#10 c=insert("Mom",c,0);#13#10 c=uppercase(c);#13#10 printf(c,"\n");#13#10 int i=pos("OM",c,1);#13#10 printf(i,"\n");#13#10 i=posex("mEnT...",c,0);#13#10 printf(i,"\n");#13#10}#13#10#13#10
strings3.bs
int main() {#13#10 string a="Montag",b="Dienstag";#13#10 if(a==b){#13#10  printf("Gleich\n");#13#10 }else if(a<>b){#13#10  printf("Ungleich\n");#13#10 }#13#10 if(a<b){#13#10  printf("Kleiner\n");#13#10 }#13#10 if(a<=b){#13#10  printf("Kleiner oder gleich\n");#13#10 }#13#10 if(a>b){#13#10  printf("Groesser\n");#13#10 }#13#10 if(a>=b){#13#10  printf("Groesser oder gleich\n");#13#10 }#13#10}#13#10#13#10
strings4.bs
int main() {#13#10 string a="Montag",b="Dienstag";#13#10 a[1]="O";#13#10 printf(a,"\n");#13#10}#13#10#13#10
strings5.bs
struct sc {#13#10 string a;#13#10 int b;#13#10 string c;#13#10 int u;#13#10};#13#10#13#10struct sb {#13#10 string a;#13#10 string c;#13#10 int b;#13#10 sc f;#13#10 byte d;#13#10} a,b;#13#10#13#10int main() {#13#10 string c;#13#10 c=";(";#13#10 a.a="meine ";#13#10 a.c="lieben ";#13#10 a.f.a="Gelder ";#13#10 a.f.c="sind ";#13#10 b.a="weg ";#13#10 b.c="fuer ";#13#10 b.f.a="immer ";#13#10 b.f.c="!";#13#10 printf(b.a);#13#10 printf(b.c);#13#10}#13#10
struct.bs
struct sA {#13#10 byte a;#13#10 byte b;#13#10};#13#10sA a;#13#10int main() {#13#10 a.a=2;#13#10 a.b=a.a+14;#13#10 printf(a.b);#13#10}
test.bs
#define test#13#10#define test3#13#10#define Macro1 Haus#13#10#define Macro2(a,b) if(a==b)#13#10struct sA {#13#10 byte a;#13#10 byte b;#13#10};#13#10struct sB {#13#10 byte a;#13#10 int b;#13#10};#13#10struct sC {#13#10 sA a;#13#10 sB *b;#13#10 float c;#13#10};#13#10int myfunc(sA a){#13#10 printf(a.a,"\r\n");#13#10}#13#10int main() {#13#10 sB b;#13#10 sC c;#13#10 c.c=pi();#13#10 c.b=&b;#13#10 b.a=1;#13#10 c.b->a++;#13#10 printf(c.b->a,"\r\n");#13#10 c.a.a=10;#13#10 myfunc(c.a);#13#10#ifdef test#13#10 printf(c.c,"\r\n");#13#10 #ifdef test2#13#10  printf("Auto\r\n");#13#10 #else#13#10  #ifndef test3#13#10   printf("Mein Macro1\r\n");#13#10  #else#13#10   printf("Dein Macro1\r\n");#13#10  #endif#13#10 #endif#13#10#else#13#10 printf("Hund\r\n");#13#10#endif#13#10}
union.bs
union sA {#13#10 int a;#13#10 unsigned byte b[4];#13#10};#13#10sA a;#13#10int main() {#13#10 a.a=0x803F1F0F;#13#10 printf(a.b[0]," ");#13#10 printf(a.b[1]," ");#13#10 printf(a.b[2]," ");#13#10 printf(a.b[3]," ");#13#10 a.a=-4;#13#10 printf(a.a/2," ");#13#10}
vector.bs
struct sVector3#13#10{#13#10  float x;#13#10  float y;#13#10  float z;#13#10};#13#10#13#10void VectorAdd(sVector3 v1, sVector3 v2, sVector3 *res)#13#10{#13#10  res.x = v1.x + v2.x;#13#10  res.y = v1.y + v2.y;#13#10  res.z = v1.z + v2.z;#13#10}#13#10#13#10int main()#13#10{#13#10  sVector3 v;#13#10  v.x = 1;#13#10  v.y = 2;#13#10  v.z = 4;#13#10#13#10  sVector3 res;#13#10  VectorAdd(v, v, &res);#13#10#13#10  printf(res.x,"\n");#13#10  printf(res.y,"\n");#13#10  printf(res.z,"\n");#13#10}#13#10
vector2.bs
struct sVector3#13#10{#13#10  float x;#13#10  float y;#13#10  float z;#13#10};#13#10#13#10sVector3 VectorAdd(sVector3 v1, sVector3 v2)#13#10{#13#10  sVector3 res;#13#10  res.x = v1.x + v2.x;#13#10  res.y = v1.y + v2.y;#13#10  res.z = v1.z + v2.z;#13#10  return res;#13#10}#13#10#13#10int main()#13#10{#13#10  sVector3 v,res;#13#10  v.x = 1;#13#10  v.y = 2;#13#10  v.z = 4;#13#10#13#10  breakpoint;#13#10  res=VectorAdd(v, v);#13#10#13#10  printf(res.x,"\n");#13#10  printf(res.y,"\n");#13#10  printf(res.z,"\n");#13#10}
